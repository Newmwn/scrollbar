/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { VNode } from "@stencil/core";
import { Direction } from "./utils/misc/enums/direction.enum";
export { VNode } from "@stencil/core";
export { Direction } from "./utils/misc/enums/direction.enum";
export namespace Components {
    interface ComponentDevkitTest {
    }
    interface NpScrollbar {
        "disabled": boolean;
        "fullHeight": boolean;
        "padding": number;
    }
    interface NpVirtualScroller {
        /**
          * Extra items to be rendered after and before the visible items
         */
        "bufferItems"?: number;
        /**
          * Custom Grid Auto Flow Style
         */
        "customAutoFlowStyle": string;
        /**
          * Custom Grid Template Style
         */
        "customGridTemplateStyle": string;
        /**
          * the direction of the virtuall scroller
         */
        "direction": Direction;
        /**
          * if this element is given, then it will receive the focus class
         */
        "elemFocusClass"?: string;
        /**
          * The element to give focus to
         */
        "elemToFocus"?: string;
        /**
          * If true, focus on the first item on the list
         */
        "focusFirstItem"?: boolean;
        "gap": number;
        /**
          * Array of unique Identifiers for comparation between items, This is used to optimize the list performance when adding, removing or changing the position of list items
         */
        "identifiers": Array<any>;
        /**
          * if set to true, virtual scroller will listen to resize events, this is usefull because when there are more visible items we need more items need to be rendered, so that the scroller continues being fast
         */
        "isResizable": boolean;
        /**
          * Styles to be applied to the item container
         */
        "itemContainerStyles": any;
        /**
          * this callback will emit the index of the list item to be rendered
         */
        "itemTemplate": ((viewPortItem: any, index: number) => VNode | string) | any;
        /**
          * In case of direction === 'vertical', this will be the number of collumns. In case of direction === 'horizontal', this will be the number of rows
         */
        "itemsPerGroup": number;
        /**
          * if true, list navigation via keyboard will be available
         */
        "keyboardNavigation": boolean;
        /**
          * This function let's us automatically scroll to an item in the list
          * @param item
          * @param scrollingBehavior
         */
        "scrollInto": (item: any, scrollingBehavior?: "smooth" | "instant" | "auto") => Promise<void>;
        /**
          * This function let's us automatically scroll to an item in the list via index
          * @param index
          * @param scrollingBehavior
         */
        "scrollToIndex": (index?: number, scrollingBehavior?: "smooth" | "instant" | "auto") => Promise<void>;
        /**
          * This function scroll to the next item thats hidden
         */
        "scrollToNextItem": (scrollingBehavior?: "smooth" | "instant" | "auto", extraValue?: number) => Promise<void>;
        /**
          * This function let's us automatically scroll to a position in the list
          * @param scrollPosition
          * @param scrollingBehavior
         */
        "scrollToPosition": (scrollPosition?: number, scrollingBehavior?: "smooth" | "instant" | "auto") => Promise<void>;
        /**
          * This function scroll to the previous item thats hidden
         */
        "scrollToPreviousItem": (scrollingBehavior?: "smooth" | "instant" | "auto", extraValue?: number) => Promise<void>;
        /**
          * if true, list navigation via tab will be available
         */
        "tabNavigation": boolean;
        /**
          * Styles to be applied to the item wrapper
         */
        "viewPortItemStyles": any;
        /**
          * The list of items that will populate the virtual scroll list
         */
        "viewPortItems": Array<any>;
    }
}
export interface NpVirtualScrollerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNpVirtualScrollerElement;
}
declare global {
    interface HTMLComponentDevkitTestElement extends Components.ComponentDevkitTest, HTMLStencilElement {
    }
    var HTMLComponentDevkitTestElement: {
        prototype: HTMLComponentDevkitTestElement;
        new (): HTMLComponentDevkitTestElement;
    };
    interface HTMLNpScrollbarElement extends Components.NpScrollbar, HTMLStencilElement {
    }
    var HTMLNpScrollbarElement: {
        prototype: HTMLNpScrollbarElement;
        new (): HTMLNpScrollbarElement;
    };
    interface HTMLNpVirtualScrollerElementEventMap {
        "scrollStartEvent": any;
        "scrollEvent": any;
        "scrollStopEvent": any;
        "scrollHeightChangeEvent": any;
    }
    interface HTMLNpVirtualScrollerElement extends Components.NpVirtualScroller, HTMLStencilElement {
        addEventListener<K extends keyof HTMLNpVirtualScrollerElementEventMap>(type: K, listener: (this: HTMLNpVirtualScrollerElement, ev: NpVirtualScrollerCustomEvent<HTMLNpVirtualScrollerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLNpVirtualScrollerElementEventMap>(type: K, listener: (this: HTMLNpVirtualScrollerElement, ev: NpVirtualScrollerCustomEvent<HTMLNpVirtualScrollerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLNpVirtualScrollerElement: {
        prototype: HTMLNpVirtualScrollerElement;
        new (): HTMLNpVirtualScrollerElement;
    };
    interface HTMLElementTagNameMap {
        "component-devkit-test": HTMLComponentDevkitTestElement;
        "np-scrollbar": HTMLNpScrollbarElement;
        "np-virtual-scroller": HTMLNpVirtualScrollerElement;
    }
}
declare namespace LocalJSX {
    interface ComponentDevkitTest {
    }
    interface NpScrollbar {
        "disabled"?: boolean;
        "fullHeight"?: boolean;
        "padding"?: number;
    }
    interface NpVirtualScroller {
        /**
          * Extra items to be rendered after and before the visible items
         */
        "bufferItems"?: number;
        /**
          * Custom Grid Auto Flow Style
         */
        "customAutoFlowStyle"?: string;
        /**
          * Custom Grid Template Style
         */
        "customGridTemplateStyle"?: string;
        /**
          * the direction of the virtuall scroller
         */
        "direction"?: Direction;
        /**
          * if this element is given, then it will receive the focus class
         */
        "elemFocusClass"?: string;
        /**
          * The element to give focus to
         */
        "elemToFocus"?: string;
        /**
          * If true, focus on the first item on the list
         */
        "focusFirstItem"?: boolean;
        "gap"?: number;
        /**
          * Array of unique Identifiers for comparation between items, This is used to optimize the list performance when adding, removing or changing the position of list items
         */
        "identifiers"?: Array<any>;
        /**
          * if set to true, virtual scroller will listen to resize events, this is usefull because when there are more visible items we need more items need to be rendered, so that the scroller continues being fast
         */
        "isResizable"?: boolean;
        /**
          * Styles to be applied to the item container
         */
        "itemContainerStyles"?: any;
        /**
          * this callback will emit the index of the list item to be rendered
         */
        "itemTemplate": ((viewPortItem: any, index: number) => VNode | string) | any;
        /**
          * In case of direction === 'vertical', this will be the number of collumns. In case of direction === 'horizontal', this will be the number of rows
         */
        "itemsPerGroup"?: number;
        /**
          * if true, list navigation via keyboard will be available
         */
        "keyboardNavigation"?: boolean;
        /**
          * Called whenever the user is scrolling
         */
        "onScrollEvent"?: (event: NpVirtualScrollerCustomEvent<any>) => void;
        /**
          * Called when the height of the virtuall scroller changes
         */
        "onScrollHeightChangeEvent"?: (event: NpVirtualScrollerCustomEvent<any>) => void;
        /**
          * Called when the user starts scrolling
         */
        "onScrollStartEvent"?: (event: NpVirtualScrollerCustomEvent<any>) => void;
        /**
          * Called when the user stops scrolling
         */
        "onScrollStopEvent"?: (event: NpVirtualScrollerCustomEvent<any>) => void;
        /**
          * if true, list navigation via tab will be available
         */
        "tabNavigation"?: boolean;
        /**
          * Styles to be applied to the item wrapper
         */
        "viewPortItemStyles"?: any;
        /**
          * The list of items that will populate the virtual scroll list
         */
        "viewPortItems"?: Array<any>;
    }
    interface IntrinsicElements {
        "component-devkit-test": ComponentDevkitTest;
        "np-scrollbar": NpScrollbar;
        "np-virtual-scroller": NpVirtualScroller;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "component-devkit-test": LocalJSX.ComponentDevkitTest & JSXBase.HTMLAttributes<HTMLComponentDevkitTestElement>;
            "np-scrollbar": LocalJSX.NpScrollbar & JSXBase.HTMLAttributes<HTMLNpScrollbarElement>;
            "np-virtual-scroller": LocalJSX.NpVirtualScroller & JSXBase.HTMLAttributes<HTMLNpVirtualScrollerElement>;
        }
    }
}
